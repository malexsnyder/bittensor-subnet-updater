name: Bittensor Subnet Updater (Debug Version)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  debug:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y openai || true
          pip install --upgrade "openai>=1.40.0"
          pip install requests pandas bittensor faiss-cpu
          python -m pip show openai

      - name: Run diagnostic script
        env:
          OPENAI_API_KEY: ${{ secrets.BITTENSOR_SUBNETS }}
        run: |
          python scripts/diagnose_openai.py

      - name: Fetch latest Bittensor subnet data
        env:
          OPENAI_API_KEY: ${{ secrets.BITTENSOR_SUBNETS }}
        run: |
          python scripts/fetch_subnets_bt.py

      - name: Build subnet profiles
        run: |
          python scripts/build_profiles_local.py

      - name: Combine profiles into a single file
        run: |
          cat data/profiles/*.md > data/all_subnet_profiles.txt
          echo "📊 Combined profiles file size: $(wc -c < data/all_subnet_profiles.txt) bytes"
          echo "📄 First 200 characters:"
          head -c 200 data/all_subnet_profiles.txt

      - name: Test OpenAI Vector Store Upload (Step by Step)
        env:
          OPENAI_API_KEY: ${{ secrets.BITTENSOR_SUBNETS }}
        run: |
          python - <<'EOF'
          import os
          import sys
          
          print("🔍 Step 1: Check API Key")
          api_key = os.environ.get("OPENAI_API_KEY")
          if not api_key:
              print("❌ OPENAI_API_KEY not set")
              sys.exit(1)
          print(f"✅ API Key found: {api_key[:10]}...")
          
          print("\n🔍 Step 2: Import OpenAI")
          try:
              from openai import OpenAI
              print("✅ OpenAI imported successfully")
          except Exception as e:
              print(f"❌ Import failed: {e}")
              sys.exit(1)
          
          print("\n🔍 Step 3: Create Client")
          try:
              client = OpenAI(api_key=api_key)
              print("✅ Client created successfully")
          except Exception as e:
              print(f"❌ Client creation failed: {e}")
              sys.exit(1)
          
          print("\n🔍 Step 4: Check Vector Store")
          vector_store_id = "vs_68f441099ff88191a84e2e4dadfdc104"
          try:
              vector_store = client.vector_stores.retrieve(vector_store_id)
              print(f"✅ Vector store found: {vector_store.name}")
              print(f"📊 Status: {vector_store.status}")
          except Exception as e:
              print(f"❌ Vector store access failed: {e}")
              print("💡 Check if vector store ID is correct and you have access")
              sys.exit(1)
          
          print("\n🔍 Step 5: Check File")
          profiles_path = "data/all_subnet_profiles.txt"
          if not os.path.exists(profiles_path):
              print(f"❌ File not found: {profiles_path}")
              sys.exit(1)
          
          file_size = os.path.getsize(profiles_path)
          print(f"✅ File found: {file_size} bytes")
          
          if file_size > 100 * 1024 * 1024:  # 100MB limit
              print(f"❌ File too large: {file_size} bytes (max 100MB)")
              sys.exit(1)
          
          print("\n🔍 Step 6: Upload File")
          try:
              with open(profiles_path, "rb") as f:
                  file_object = client.vector_stores.files.upload_and_poll(
                      vector_store_id=vector_store_id,
                      file=f
                  )
              print(f"✅ Upload successful!")
              print(f"📁 File ID: {file_object.id}")
              print(f"📊 Status: {file_object.status}")
          except Exception as e:
              print(f"❌ Upload failed: {e}")
              print("💡 Common issues:")
              print("   - File too large")
              print("   - Vector store full")
              print("   - Network issues")
              print("   - Invalid file format")
              sys.exit(1)
          
          print("\n🎉 All steps completed successfully!")
          EOF

# 
