name: Bittensor Subnet Updater (update2)

on:
  schedule:
    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y openai || true
          pip install --upgrade "openai>=1.40.0"
          pip install requests pandas bittensor faiss-cpu
          python -m pip show openai

      - name: Fetch latest Bittensor subnet data
        env:
          OPENAI_API_KEY: ${{ secrets.BITTENSOR_SUBNETS }}
        run: |
          python scripts/fetch_subnets_bt.py

      - name: Build subnet profiles
        run: |
          python scripts/build_profiles_local.py

      - name: Combine profiles into a single file
        run: |
          cat data/profiles/*.md > data/all_subnet_profiles.txt
          echo "📊 Combined profiles file size: $(wc -c < data/all_subnet_profiles.txt) bytes"
          echo "📄 First 200 characters:"
          head -c 200 data/all_subnet_profiles.txt

      - name: Upload latest subnet data to OpenAI Vector Store
        env:
          OPENAI_API_KEY: ${{ secrets.BITTENSOR_SUBNETS }}
        run: |
          python - <<'EOF'
          import os
          import sys
          import time
          
          print("🔍 OpenAI SDK version check:")
          try:
              import openai
              print(f"OpenAI version: {getattr(openai, '__version__', 'unknown')}")
          except Exception as e:
              print(f"❌ Error importing openai: {e}")
              sys.exit(1)

          # Check API key
          api_key = os.environ.get("OPENAI_API_KEY")
          if not api_key:
              print("❌ OPENAI_API_KEY environment variable not set")
              sys.exit(1)
              
          if not api_key.startswith("sk-"):
              print("❌ OPENAI_API_KEY does not appear to be valid (should start with 'sk-')")
              sys.exit(1)
              
          print("✅ API key format looks correct")

          # Try different OpenAI client approaches
          client = None
          
          # Method 1: Try new OpenAI client
          try:
              from openai import OpenAI
              client = OpenAI(api_key=api_key)
              print("✅ Using new OpenAI client interface")
          except Exception as e:
              print(f"⚠️ New client failed: {e}")
              
          # Method 2: Try legacy client if new one failed
          if client is None:
              try:
                  import openai
                  openai.api_key = api_key
                  client = openai
                  print("✅ Using legacy OpenAI client interface")
              except Exception as e:
                  print(f"❌ Both client methods failed: {e}")
                  sys.exit(1)

          vector_store_id = "vs_68f441099ff88191a84e2e4dadfdc104"
          profiles_path = "data/all_subnet_profiles.txt"

          if not os.path.exists(profiles_path):
              print(f"❌ {profiles_path} not found.")
              sys.exit(1)
              
          file_size = os.path.getsize(profiles_path)
          print(f"📄 File size: {file_size} bytes")

          print("📤 Uploading subnet data to vector store...")

          try:
              # Try different upload methods based on client type
              if hasattr(client, 'files') and hasattr(client.files, 'create'):
                  # New client method
                  print("🔄 Using new client upload method...")
                  with open(profiles_path, "rb") as f:
                      file_response = client.files.create(
                          file=f,
                          purpose="assistants"
                      )
                      print(f"📁 File uploaded with ID: {file_response.id}")
                      
                      # Add to vector store
                      if hasattr(client, 'vector_stores') and hasattr(client.vector_stores, 'files'):
                          vector_store_file = client.vector_stores.files.create(
                              vector_store_id=vector_store_id,
                              file_id=file_response.id
                          )
                          print(f"✅ File added to vector store successfully.")
                          print(f"📁 Vector store file ID: {vector_store_file.id}")
                      else:
                          print("⚠️ Vector store files API not available, but file uploaded successfully")
                          
              elif hasattr(client, 'File'):
                  # Legacy client method
                  print("🔄 Using legacy client upload method...")
                  with open(profiles_path, "rb") as f:
                      file_response = client.File.create(
                          file=f,
                          purpose="assistants"
                      )
                      print(f"📁 File uploaded with ID: {file_response.id}")
                      print("✅ File uploaded successfully (legacy method)")
              else:
                  print("❌ No compatible upload method found")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"❌ Error uploading file: {e}")
              print("💡 Common issues:")
              print("   - Vector store ID is incorrect")
              print("   - File is too large")
              print("   - API key doesn't have access to the vector store")
              print("   - Vector store is full")
              print("   - OpenAI API structure has changed")
              print(f"   - Error details: {str(e)}")
              print(f"   - Client type: {type(client)}")
              print(f"   - Client attributes: {dir(client)}")
              sys.exit(1)
          EOF

      - name: Commit and push updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main || true
          git add -A
          git commit -m "Auto-update $(date -u '+%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push origin main || echo "Push failed"

# 